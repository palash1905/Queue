#include<stdio.h>
#define max 5
int myqueue[max];
int r = -1;
int f = -1;

void enqueue();
void dequeue();
void display();

int main() {
    int choice;
    
    do {
        printf("\n1-Insert\n2-Delete\n3-Print\n4-Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                enqueue();
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while(choice != 4);
}

void enqueue() {
    int item;
    printf("Enter element you want to insert into the queue: ");
    scanf("%d", &item);

    if (r == max - 1) {
        printf("Queue Overflow! Cannot insert.\n");
    } 
	else 
	{
        if (f == -1) {
            f = 0;
        }
        r = r + 1;
        myqueue[r] = item;
        printf("Element %d inserted successfully.\n", item);
    }
}

void dequeue() {
    int item;
    if (f == -1 || f > r) {
        printf("Queue Underflow! Cannot delete.\n");
    } else {
        item = myqueue[f];
        if (f == r) {
            f = -1;
            r = -1;
        } else {
            f = f + 1;
        }
        printf("Element %d deleted successfully.\n", item);
    }
}

void display() {
	int i;
    if (f == -1 || f > r) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue contents: ");
    	for (i = f; i <= r; i++) {
            printf("%d ", myqueue[i]);
        }
        printf("\n");
    }
}

// Using linked list
#include<stdio.h>
#include<malloc.h>

struct node {
    int data;
    struct node *next;
};

struct node *f = NULL, *r = NULL;

void insert() {
    struct node *p;
    p = (struct node*)malloc(sizeof(struct node));
    
    if (p == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    
    printf("Enter data of the node: ");
    scanf("%d", &p->data);
    p->next = NULL;
    
    if (r == NULL) {
        f = p;
        r = p;
    } else {
        r->next = p;
        r = p;
    }
    printf("Node inserted with value: %d\n", p->data);
}

void delete() {
    struct node *q;
    
    if (f == NULL) {
        printf("Queue Underflow\n");
        return;
    } else {
        q = f;
        f = f->next;
        free(q);
        if (f == NULL) {
            r = NULL;
        }
        printf("Node deleted\n");
    }
}

void display() {
    struct node *temp = f;
    
    if (f == NULL) {
        printf("Queue is empty\n");
        return;
    }
    
    printf("Queue contents: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice;
    
    do {
        printf("\n1 - Insert\n2 - Delete\n3 - Display\n4 - Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch(choice) {
            case 1: 
                insert();
                break;
            case 2:
                delete();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while(choice != 4);
    
    return 0;
}
// Using circular linked list
#include <stdio.h>
#define max 5
int myqueue[max];
int front = -1;
int rear = -1;

void enqueue();
void dequeue();
void display();

int main() {
    int choice;
    
    do {
        printf("\n1-Insert\n2-Delete\n3-Print\n4-Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                enqueue();
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while(choice != 4);
}

void enqueue() {
    int item;
    printf("Enter element you want to insert into the queue: ");
    scanf("%d", &item);

    if ((rear + 1) % max == front) {
        printf("Queue Overflow! Cannot insert.\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear = (rear + 1) % max;
        myqueue[rear] = item;
        printf("Element %d inserted successfully.\n", item);
    }
}

void dequeue() {
    int item;
    if (front == -1) {
        printf("Queue Underflow! Cannot delete.\n");
    } else {
        item = myqueue[front];
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % max;
        }
        printf("Element %d deleted successfully.\n", item);
    }
}

void display() {
    int i;
    if (front == -1) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue contents: ");
        i = front;
        while (i != rear) {
            printf("%d ", myqueue[i]);
            i = (i + 1) % max;
        }
        printf("%d ", myqueue[rear]);
        printf("\n");
    }
}
